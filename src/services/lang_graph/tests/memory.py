"""
Testes de opera√ß√µes de mem√≥ria.
"""

import logging
import uuid
from src.services.lang_graph.repository import MemoryRepository
from src.services.lang_graph.models import MemoryType
from sqlalchemy import text

logger = logging.getLogger(__name__)


async def test_memory_operations():
    """
    Testes de opera√ß√µes de mem√≥ria.
    """
    print("üìã Executando: Opera√ß√µes de Mem√≥ria")
    print("----------------------------------------")

    # Usar UUID √∫nico para evitar contamina√ß√£o
    test_user_id = str(uuid.uuid4())
    repository = MemoryRepository()

    try:
        # Inicializar engine e recriar tabelas
        repository.db_manager.initialize_engine()
        repository.db_manager.create_tables()
        print("  ‚úÖ Tabelas verificadas")

        print("üß† Testando opera√ß√µes de mem√≥ria...")

        # Teste 1: Salvar mem√≥ria
        print("  üìù Testando salvamento de mem√≥ria...")
        memory_id = repository.create_memory(
            user_id=test_user_id,
            content="O usu√°rio gosta de caf√© com leite",
            memory_type=MemoryType.PREFERENCE,
        )
        print(f"  ‚úÖ Mem√≥ria salva com ID: {memory_id}")

        # Teste 2: Busca sem√¢ntica
        print("  üîç Testando busca sem√¢ntica...")
        memories = repository.get_memories_semantic(
            user_id=test_user_id,
            query="caf√©",
            memory_type=MemoryType.PREFERENCE,
            limit=5,
            min_relevance=0.6,
        )
        print(f"  ‚úÖ Encontradas {len(memories)} mem√≥rias sem√¢nticas")
        if memories:
            print(
                f"    - {memories[0].content} (tipo: {memories[0].memory_type.value})"
            )

        # Teste 3: Busca cronol√≥gica
        print("  üìÖ Testando busca cronol√≥gica...")
        memories = repository.get_memories_chronological(
            user_id=test_user_id,
            memory_type=MemoryType.PREFERENCE,
            limit=5,
        )
        print(f"  ‚úÖ Encontradas {len(memories)} mem√≥rias cronol√≥gicas")

        print("  ‚úÖ Todas as opera√ß√µes de mem√≥ria OK")
        return True

    except Exception as e:
        print(f"  ‚ùå Erro nas opera√ß√µes de mem√≥ria: {e}")
        return False


if __name__ == "__main__":
    import asyncio

    logging.basicConfig(level=logging.INFO)
    asyncio.run(test_memory_operations())
