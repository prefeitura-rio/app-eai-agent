"""
Testes de tratamento de erros.
"""

import logging
from src.services.lang_graph.service import LangGraphChatbotService

logger = logging.getLogger(__name__)


async def test_error_handling():
    """
    Testes de tratamento de erros.
    """
    print("‚ö†Ô∏è Testando tratamento de erros...")

    chatbot_service = LangGraphChatbotService()

    try:
        # Teste 1: Par√¢metros inv√°lidos
        print("  üö´ Testando par√¢metros inv√°lidos...")

        # Teste com par√¢metros vazios - deve tratar graciosamente
        try:
            result = await chatbot_service.process_message(
                user_id="", thread_id="", message=""
            )
            print("  ‚ö†Ô∏è Sistema n√£o retornou erro esperado, mas continuou funcionando")
        except Exception as e:
            print(
                f"  ‚úÖ Sistema tratou graciosamente par√¢metros vazios: {str(e)[:100]}..."
            )

        # Teste 2: Par√¢metros None
        try:
            result = await chatbot_service.process_message(
                user_id=None, thread_id=None, message=None
            )
            print("  ‚ö†Ô∏è Sistema n√£o retornou erro esperado, mas continuou funcionando")
        except Exception as e:
            print(
                f"  ‚úÖ Sistema tratou graciosamente par√¢metros None: {str(e)[:100]}..."
            )

        print("  ‚úÖ Tratamento de erros OK")
        return True

    except Exception as e:
        print(f"  ‚ùå Erro inesperado: {e}")
        return False
    finally:
        chatbot_service.close()


if __name__ == "__main__":
    import asyncio

    logging.basicConfig(level=logging.INFO)
    asyncio.run(test_error_handling())
